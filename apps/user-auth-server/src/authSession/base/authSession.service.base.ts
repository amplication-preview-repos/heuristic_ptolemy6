/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, AuthSession as PrismaAuthSession } from "@prisma/client";

export class AuthSessionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AuthSessionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.authSession.count(args);
  }

  async authSessions(
    args: Prisma.AuthSessionFindManyArgs
  ): Promise<PrismaAuthSession[]> {
    return this.prisma.authSession.findMany(args);
  }
  async authSession(
    args: Prisma.AuthSessionFindUniqueArgs
  ): Promise<PrismaAuthSession | null> {
    return this.prisma.authSession.findUnique(args);
  }
  async createAuthSession(
    args: Prisma.AuthSessionCreateArgs
  ): Promise<PrismaAuthSession> {
    return this.prisma.authSession.create(args);
  }
  async updateAuthSession(
    args: Prisma.AuthSessionUpdateArgs
  ): Promise<PrismaAuthSession> {
    return this.prisma.authSession.update(args);
  }
  async deleteAuthSession(
    args: Prisma.AuthSessionDeleteArgs
  ): Promise<PrismaAuthSession> {
    return this.prisma.authSession.delete(args);
  }
}
